(in-package "CL-USER")

(declaim (inline rem-pi/2))
(alien:def-alien-routine ("rem_pio2" rem-pi/2) c-call:int
  (x double-float)
  (y0 double-float :out)
  (y1 double-float :out))


(defun compare (x)
  (multiple-value-bind (n y0 y1)
      (ieee754-rem-pi/2 x)
    (multiple-value-bind (true-n true-y0 true-y1)
	(kernel::%ieee754-rem-pi/2 x)
      (unless (and (= n true-n)
	       (eql y0 true-y0)
	       (eql y1 true-y1))
	  (list x
		(list n y0 y1)
		(list true-n true-y0 true-y1))))))

(defun test-mult-pi/4 (n &optional (count 1000))
  ;; Test multiples of random multiples of pi up to n*pi
  (let ((pi/4 (/ pi 4))
	(fail-count 0))
    (dotimes (k count)
      (let* ((x (* (random n) pi/4))
	     (result (compare x)))
	(when result
	  (incf fail-count)
	  (format t "~S~%" result))))
    (format t "~D failures out of ~D tests~%" fail-count count)))

(defun test-time (x n)
  (declare (double-float x)
	   (fixnum n))
  (flet ((test-lisp ()
	   (let ((nn 0)
		 (yy0 0d0)
		 (yy1 0d0))
	     (declare (fixnum n)
		      (double-float yy0 yy1))
	     (dotimes (k n)
	       (declare (fixnum k))
	       (multiple-value-bind (n y0 y1)
		   (ieee754-rem-pi/2 x)
		 (setf nn n)
		 (setf yy0 y0)
		 (setf yy1 y1)))
	     (values nn yy0 yy1)))
	 (test-ref ()
	   (let ((nn 0)
		 (yy0 0d0)
		 (yy1 0d0))
	     (declare (fixnum n)
		      (double-float yy0 yy1))
	     (dotimes (k n)
	       (declare (fixnum k))
	       (multiple-value-bind (n y0 y1)
		   (kernel::%ieee754-rem-pi/2 x)
		 (setf nn n)
		 (setf yy0 y0)
		 (setf yy1 y1)))
	     (values nn yy0 yy1))))
    (time (test-lisp))
    (time (test-ref))))